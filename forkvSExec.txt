Incidentally, exec does not generate a new PID. exec replaces the contents of the process -- the memory is discarded, 
and a whole new executable is loaded -- but the kernel state remains the same (open files, environment variables, working directory, user, etc.), 
and the PID remains the same.  the fork creates a new PID, and the exec inherits this new number.

fork starts a new process which is a copy of the one that calls it, while exec replaces the current process image with another (different) one.
Both parent and child processes are executed simultaneously in case of fork() while Control never returns to the original program unless there is an exec() err

waitpid() system call suspends execution of calling process until a child specified by pid argument has changed state or.


Fork - 
creates a new child process which runs concurrently with the parent process. The new process created is a copy of the current process except for the returned value.
After a new child process is created, both processes will execute the next instruction following the fork() system call. 
A child process uses the same pc(program counter), same CPU registers, same open files which use in the parent process.
global variable change in one process does not affected two other processes because data/state of two processes are different.

So each process child and parent both have their own copy of globalVariable and localvar.
Though address of memory returned by malloc is same but in actual they are pointing to or mapped to different physical address.

Exec - 
The exec() system call replaces the current process with a new program.
Control never returns to the original program unless there is an exec() err.
replaces the contents of the process -- the memory is discarded, 
and a whole new executable is loaded -- but the kernel state remains the same (open files, environment variables, working directory, user, etc.), 
and the PID remains the same.