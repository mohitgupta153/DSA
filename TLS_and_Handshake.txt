The purpose of the SSL/TLS handshake is to perform all the cryptographic work needed to have a secure connection.
1. Exchanging encryption capabilities, Exchanging cipher suites and parameters.
2. Authenticating the SSL certificate, Authenticating one or both parties.
3. Exchanging/generating a session key, Creating/Exchanging symmetric session keys.

TCP Connection is opened --> TCP socket is provided to SSL --> SSL handshake


The first steps of the TLS handshake require the client and server to share their capabilities so they can find the cryptographic features they mutually support using cipher suites.

To truly have a secure connection, you can’t just encrypt your data, you also need to know it’s being sent to the right website/organization. SSL/TLS certificates provide that authentication. 
But the way they do it depends on the cipher suite being used.

During the authentication portion of the TLS handshake, the client performs several cryptographically secure checks to make sure the certificate provided by the server is authentic. 
This includes checking the digital signature and making sure the certificate originates from a trusted CA, verifying the certificate chain, and checking for any other potential problems with the certificate data 
(expired certificate, wrong domain name, etc). The client will also make sure the server has possession of the certificate’s private key. This is done during the key exchange/generation process.

During this stage, the client also verifies that the server owns the private key associated with the certificate, the client will encrypt random data with the public key that needs to be used to generate the session key. 
The server will only be able to decrypt and use that data if it has the private key, which provides proof of possession.

The last part of the TLS handshake involves creating the “session key,” which is the key that will actually be used for secure communication. The exact method for generating the key varies based on the cipher suite that was chosen, with the two most common schemes being RSA and Diffie-Hellman.
To end the handshake, each party lets the other know they have done all the necessary work, then both run check-sums to make sure the handshake occurred without any malicious tampering or corruption.

The client is going to generate a random string of bytes called a pre-master secret, then encrypt it with the server’s public key and transmit it.
The “Change Cipher Spec” message lets the other party know that it has generated the session key and is going to switch to encrypted communication.
The “Finished” message is then sent to indicate that the handshake is complete on the client side. The Finished message is encrypted, and is the first data protected by the session key. The message contains data (MAC) that allows each party to make sure the handshake was not tampered with.
Now it’s the server’s turn to do the same. It decrypts the pre-master secret and computes the session key. Then it sends its “Change Cipher Spec” message to indicate it is switching to encrypted communication.
The server sends its “Finished” message using the symmetric session key it just generated, it also performs the same check-sum to verify the integrity of the handshake.