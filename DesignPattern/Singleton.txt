/* The singleton pattern is a design pattern that restricts the instantiation of a class to one object. */
#include <iostream>

class Singleton
{
    private:
        /* Here will be the instance stored. */
        static Singleton* instance;

        /* Private constructor to prevent instancing. */
        Singleton();
        
        /* Private copy constructor to prevent instancing. */
        Singleton(const Singleton&);
        
        /* Private copy assignment operator to prevent instancing. */
        Singleton& operator=(const Singleton&);
        
        /* Prevent unwanted destruction */
        //~Singleton(); 

    public:
        /* Static access method. */
        static Singleton* getInstance();
        
    /* Using static variable inside constructor */
    /*   static Singleton& Instance()
        {
            static Singleton inst;
            return inst;
        }
    */
        
    /*If you are using C++ 11, you may leave the copy constructor
    and the copy assignment operator public but explicitly delete them. */
    /*    Singleton(const Singleton&) = delete;
        Singleton& operator=(const Singleton&) = delete; */
        
    /* this method is a mirror of GetInstance */
        static void ResetInstance()
        {
            delete instance; // REM : it works even if the pointer is NULL (does nothing then)
            instance = NULL; // so GetInstance will still work.
        }
};

/* Null, because instance will be initialized on demand. */
Singleton* Singleton::instance = 0;

Singleton* Singleton::getInstance()
{
    if (instance == NULL)
    {
        /* Critical Section is used only during instantiation, 
        and for handling the rare (but catastrophic!) thread-safety 
        issue during instantiation and the race condition between two 
        threads. We do not enter a critical section block every time the 
        client calls GetInstance(). Double-Checked Locking method. */
        
        //EnterCriticalSection();
        if (instance == NULL)
        {
            instance = new Singleton();
        }
        //LeaveCriticalSection();
    }

    return instance;
}

Singleton::Singleton()
{}

int main()
{
    //new Singleton(); // Won't work
    Singleton* s = Singleton::getInstance(); // Ok
    Singleton* r = Singleton::getInstance();

    /* The addresses will be the same. */
    std::cout << s << std::endl;
    std::cout << r << std::endl;
    
    //delete instance;
    Singleton::ResetInstance();
}